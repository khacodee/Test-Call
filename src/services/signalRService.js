import * as signalR from "@microsoft/signalr";

export let connection = null;

// ‚úÖ Kh·ªüi t·∫°o k·∫øt n·ªëi SignalR
export const startConnection = async () => {
  if (connection && connection.state === signalR.HubConnectionState.Connected) {
    console.log("‚úÖ SignalR ƒë√£ k·∫øt n·ªëi.");
    return;
  }

  connection = new signalR.HubConnectionBuilder()
    .withUrl("https://tellory.id.vn/hub", {
      skipNegotiation: true,
      transport: signalR.HttpTransportType.WebSockets,
    })
    .withAutomaticReconnect([0, 2000, 5000, 10000]) // üîπ Reconnect sau 0s, 2s, 5s, 10s
    .build();

  connection.onreconnecting((error) => {
    console.warn("üîÑ SignalR ƒëang k·∫øt n·ªëi l·∫°i...", error);
  });

  connection.onreconnected((connectionId) => {
    console.log(`‚úÖ SignalR ƒë√£ k·∫øt n·ªëi l·∫°i: ${connectionId}`);
  });

  connection.onclose(async (error) => {
    console.error("‚ùå SignalR b·ªã ƒë√≥ng:", error);
    if (error) {
      console.log("‚è≥ Th·ª≠ k·∫øt n·ªëi l·∫°i sau 5s...");
      setTimeout(startConnection, 5000); // üîπ Th·ª≠ k·∫øt n·ªëi l·∫°i sau 5s
    }
  });

  try {
    await connection.start();
    console.log("‚úÖ SignalR ƒë√£ k·∫øt n·ªëi.");
     connection.on("ReceiveMessage", (message) => {
      console.log("üïí Message:", message);
    });
    connection.on("ReceiveTimeServer", (time) => {
      console.log("üïí Th·ªùi gian t·ª´ server:", time);
    });
  } catch (error) {
    console.error("‚ùå L·ªói k·∫øt n·ªëi SignalR:", error);
    setTimeout(startConnection, 5000);
  }
};

// ‚õî D·ª´ng k·∫øt n·ªëi SignalR
export const stopConnection = async () => {
  if (connection) {
    try {
      await connection.stop();
      console.log("‚õî SignalR ƒë√£ ng·∫Øt k·∫øt n·ªëi.");
    } catch (error) {
      console.error("‚ùå L·ªói khi ng·∫Øt k·∫øt n·ªëi SignalR:", error);
    } finally {
      connection = null;
    }
  }
};

// üì• L·∫Øng nghe tin nh·∫Øn t·ª´ server
export const onMessage = (eventName, callback) => {
  if (connection && connection.state === signalR.HubConnectionState.Connected) {
    connection.off(eventName); // üîπ Tr√°nh tr√πng l·∫∑p
    connection.on(eventName, callback);
  } else {
    console.error(`‚ùå Kh√¥ng th·ªÉ l·∫Øng nghe s·ª± ki·ªán "${eventName}": Ch∆∞a k·∫øt n·ªëi.`);
  }
};

// üì§ G·ª≠i tin nh·∫Øn t·ªõi server
export const sendMessage = async (eventName, ...args) => {
  if (connection && connection.state === signalR.HubConnectionState.Connected) {
    try {
      await connection.invoke(eventName, ...args);
    } catch (error) {
      console.error(`‚ùå L·ªói khi g·ª≠i tin nh·∫Øn "${eventName}":`, error);
    }
  } else {
    console.error(`‚ùå Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn "${eventName}": Ch∆∞a k·∫øt n·ªëi.`);
  }
};
